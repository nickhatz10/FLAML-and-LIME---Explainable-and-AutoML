# -*- coding: utf-8 -*-
"""Univariate Time Series SHAP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YyVKxepnv632s5tVyzm_5X4aIP868e7L
"""

!pip install flaml
!pip install shap
!pip install "flaml[ts_forecast]"

import flaml
from flaml import AutoML
import sklearn
from sklearn.model_selection import train_test_split
import numpy as np
import shap
import pandas as pd
from google.colab import drive
drive.mount('/content/drive')

# Below is the code for Univariate
import statsmodels.api as sm

data = sm.datasets.co2.load_pandas().data
# data is given in weeks, but the task is to predict monthly, so use monthly averages instead
data = data['co2'].resample('MS').mean()
data = data.fillna(data.bfill())  # makes sure there are no missing values
data = data.to_frame().reset_index()
num_samples = data.shape[0]
time_horizon = 12
split_idx = num_samples - time_horizon
train_df = data[:split_idx]  # train_df is a dataframe with two columns: timestamp and label
X_test = data[split_idx:]['index'].to_frame()  # X_test is a dataframe with dates for prediction
y_test = data[split_idx:]['co2']  # y_test is a series of the values corresponding to the dates for prediction

from flaml import AutoML

automl = AutoML()
settings = {
    "time_budget": 60,  # total running time in seconds
    "metric": 'mape',  # primary metric for validation: 'mape' is generally used for forecast tasks
    "task": 'ts_forecast',  # task type
    "log_file_name": 'CO2_forecast.log',  # flaml log file
    "eval_method": "holdout",  # validation method can be chosen from ['auto', 'holdout', 'cv']
    "seed": 7654321,  # random seed
}

automl.fit(dataframe=train_df,  # training data
           label='co2',  # label column
           period=time_horizon,  # key word argument 'period' must be included for forecast task)
           **settings)

#This is the first column of our train set.
train_x = train_df[train_df.columns[0]]
train_y = train_df[train_df.columns[1]]

flaml_y_pred = automl.predict(X_test)
import matplotlib.pyplot as plt

plt.plot(X_test, y_test, label='Actual level')
plt.plot(X_test, flaml_y_pred, label='FLAML forecast')
plt.xlabel('Date')
plt.ylabel('CO2 Levels')
plt.legend()

print(automl.model.estimator)

#Changing our output from the automl code to get our model in a normal setting so we can run shap on it freely.
def automl_model_output(automl_model_settings, train_data_x, train_data_y):
  model = automl_model_settings
  model.fit(train_data_x, train_data_y)
  return model

pip install interpret

import interpret
model = interpret.glassbox.ExplainableBoostingRegressor()

model = automl_model_output(automl.model.estimator, train_x,train_y)

# compute the SHAP values for the linear model
explainer = shap.Explainer(automl.model.estimator.predict)

print(X_test)
shap_values_test = explainer(train_x)