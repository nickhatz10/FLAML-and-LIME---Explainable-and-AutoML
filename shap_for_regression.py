# -*- coding: utf-8 -*-
"""SHAP_for_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w6QEddnRBHo2rgVAj_ohtImQ_YGiKRyc
"""

!pip install flaml

!pip install shap

import flaml
from flaml import AutoML
import sklearn
from sklearn.model_selection import train_test_split
import numpy as np
import shap
from sklearn.datasets import fetch_california_housing
import pandas as pd

dataset, labels = fetch_california_housing(return_X_y=True, as_frame=True)

X_train,X_test,y_train,y_test=train_test_split(dataset, labels, test_size=0.2)

# Initialize an AutoML instance
automl = AutoML()
# Specify automl goal and constraint
automl_settings = {"time_budget": 60,  "metric": 'r2',"task": 'regression', "estimator_list":['rf']}
# Train with labeled input data
automl.fit(X_train=X_train, y_train=y_train,
           **automl_settings)
# Predict
prediction = automl.predict(X_test)
print(prediction)
# Print the best model
print(automl.model.estimator)

class flaml_shap_regression:

  def __init__(self, model):
    self.model = model

  def waterfall(self, data, index):
    explainer = shap.Explainer(self.model)
    shap_values = explainer(data)
    return shap.plots.waterfall(shap_values[index])
  
  def force(self, data, index):
    shap.initjs()
    explainer = shap.Explainer(self.model)
    shap_values = explainer(data)
    return shap.plots.force(shap_values[index])

  def bar(self, data):
    explainer = shap.Explainer(self.model)
    shap_values = explainer(data)
    return shap.plots.bar(shap_values)
  
  def beeswarm(self, data):
    explainer = shap.Explainer(self.model)
    shap_values = explainer(data)
    return shap.plots.beeswarm(shap_values)

flaml_shap = flaml_shap_regression(automl.model.estimator)

# works with xgboost
flaml_shap.force(X_test, index = 5)

# works with xgboost
flaml_shap.force(X_train, index = 5)

# works with xgboost
flaml_shap.bar(X_train)

# works with xgboost
flaml_shap.beeswarm(X_test)