# -*- coding: utf-8 -*-
"""FLAML_LIME_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZkjlC3VSZ-_hQaWaiqRPwSB_vKRSMv_8
"""

pip install lime

pip install flaml

# mount my google drive to this notebook so I can access my files
from google.colab import drive
drive.mount('/content/drive')

# import statements that we will need for preprocessing
import pandas as pd
import numpy as np

# read csv to turn it into a dataframe
wifi_csv = '/content/drive/My Drive/DS 440/mobile_wifi.csv'
wifi_df = pd.read_csv(wifi_csv)

# drop the unnecessary ID column
wifi_df = wifi_df.drop('id', axis =1)

# get labels and then drop the labels column from the data frame
train_labels = wifi_df['battery_power']

wifi_df = wifi_df.drop('battery_power', axis = 1)
train_data = wifi_df

# train-test-split to get our training and testing data with train and test labels
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(train_data, train_labels, test_size=0.3, random_state=42)

# flaml to find the best regression classifier
from flaml import AutoML
automl = AutoML()
automl_settings = {"task": 'regression', 'time_budget' : 120}
automl.fit(X_train.values, y_train.values, **automl_settings)
prediction = automl.predict(X_test.values)

# CLASS FUNCTION FOR REGRESSION
# allows us to easily use FLAML and LIME together for regression problems

class flaml_lime_regression:

  # initializes variables
  def __init__(self, ml_classifier, train_data, test_data, test_labels):
    self.ml_classifier = ml_classifier
    self.train_data = train_data
    self.test_data = test_data
    self.test_labels = test_labels

  # creates the LIME explainer
  def flaml_lime_explainer(self, **kwargs):

    import lime
    from lime import lime_tabular
    explainer = lime_tabular.LimeTabularExplainer(
      training_data=np.array(self.train_data),
      feature_names = self.train_data.columns,
      mode='regression',
      **kwargs
    )
    return explainer

  # outputs the HTML image so we can see an explanation of how well FLAML distinguished between the various classes
  def flaml_lime_show(self, explainer, row_index = 0, **kwargs):

    import lime
    from lime import lime_tabular
    print("True Label: {}\n".format(self.test_labels.values[row_index]))
    explainer = explainer

    exp = explainer.explain_instance(data_row=self.test_data.values[row_index], predict_fn=self.ml_classifier.predict, **kwargs)

    return exp.show_in_notebook(show_table=True)

# calls our class object and its functions to make sure they work correctly
# shows that we were able to create a compatible and easy-to-use LIME and FLAML interaction function

flaml_lime_regress = flaml_lime_regression(ml_classifier = automl, train_data = X_train, test_data = X_test, test_labels = y_test)

explainer = flaml_lime_regress.flaml_lime_explainer(class_names = ['battery_power'])
flaml_lime_regress.flaml_lime_show(explainer, row_index = 1)